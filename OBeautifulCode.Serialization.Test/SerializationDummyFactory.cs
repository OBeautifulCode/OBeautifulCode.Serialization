// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SerializationDummyFactory.cs" company="OBeautifulCode">
//   Copyright 2015 Obc
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Obc.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Obc.Serialization.Recipes
{
    using System;

    using FakeItEasy;

    using OBeautifulCode.Compression;
    using OBeautifulCode.Serialization;
    using OBeautifulCode.Serialization.Json;
    using OBeautifulCode.AutoFakeItEasy;
    
    /// <summary>
    /// Create dummy objects for <see cref="Obc.Serialization.Domain" />.
    /// </summary>
    #if !ObcSerializationDomainTest
        [System.Diagnostics.DebuggerStepThrough]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        [System.CodeDom.Compiler.GeneratedCode("Obc.Recipes.InitializeTestProject", "See package version number")]
    #endif
    public class SerializationDummyFactory : IDummyFactory
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SerializationDummyFactory"/> class.
        /// </summary>
        public SerializationDummyFactory()
        {
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(SerializationKind.Invalid, SerializationKind.Proprietary);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(SerializationFormat.Invalid);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(CompressionKind.Invalid);
            AutoFixtureBackedDummyFactory.ConstrainDummyToExclude(RegisteredJsonConverterOutputKind.Unknown);

            #if ObcSerializationDomainTest
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TypeRepresentation(A.Dummy<string>(), A.Dummy<string>(), A.Dummy<string>(), new TypeRepresentation[0]));

            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<Obc.Serialization.Test.KeyOrValueObjectHierarchyBase>();
            AutoFixtureBackedDummyFactory.UseRandomConcreteSubclassForDummy<Obc.Serialization.Test.TestBase>();
            #endif
        }

        /// <inheritdoc />
        public Priority Priority => new Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}