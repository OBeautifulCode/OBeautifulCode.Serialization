// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.75.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Serialization
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Globalization;
    using global::System.Linq;

    using global::OBeautifulCode.Compression;
    using global::OBeautifulCode.Equality.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Type;
    using global::OBeautifulCode.Type.Recipes;

    using static global::System.FormattableString;

    public partial class SerializerDescription : IModel<SerializerDescription>
    {
        /// <summary>
        /// Determines whether two objects of type <see cref="SerializerDescription"/> are equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are equal; otherwise false.</returns>
        public static bool operator ==(SerializerDescription left, SerializerDescription right)
        {
            if (ReferenceEquals(left, right))
            {
                return true;
            }

            if (ReferenceEquals(left, null) || ReferenceEquals(right, null))
            {
                return false;
            }

            var result = left.Equals(right);

            return result;
        }

        /// <summary>
        /// Determines whether two objects of type <see cref="SerializerDescription"/> are not equal.
        /// </summary>
        /// <param name="left">The object to the left of the equality operator.</param>
        /// <param name="right">The object to the right of the equality operator.</param>
        /// <returns>true if the two items are not equal; otherwise false.</returns>
        public static bool operator !=(SerializerDescription left, SerializerDescription right) => !(left == right);

        /// <inheritdoc />
        public bool Equals(SerializerDescription other)
        {
            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ReferenceEquals(other, null))
            {
                return false;
            }

            var result = this.SerializationKind.IsEqualTo(other.SerializationKind)
                      && this.SerializationFormat.IsEqualTo(other.SerializationFormat)
                      && this.CompressionKind.IsEqualTo(other.CompressionKind)
                      && this.ConfigurationTypeRepresentation.IsEqualTo(other.ConfigurationTypeRepresentation)
                      && this.Metadata.IsEqualTo(other.Metadata);

            return result;
        }

        /// <inheritdoc />
        public override bool Equals(object obj) => this == (obj as SerializerDescription);

        /// <inheritdoc />
        public override int GetHashCode() => HashCodeHelper.Initialize()
            .Hash(this.SerializationKind)
            .Hash(this.SerializationFormat)
            .Hash(this.CompressionKind)
            .Hash(this.ConfigurationTypeRepresentation)
            .Hash(this.Metadata)
            .Value;

        /// <inheritdoc />
        public object Clone() => this.DeepClone();

        /// <inheritdoc />
        public SerializerDescription DeepClone()
        {
            var result = new SerializerDescription(
                                 this.SerializationKind,
                                 this.SerializationFormat,
                                 this.ConfigurationTypeRepresentation?.DeepClone(),
                                 this.CompressionKind,
                                 this.Metadata?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="SerializationKind" />.
        /// </summary>
        /// <param name="serializationKind">The new <see cref="SerializationKind" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="SerializerDescription" /> using the specified <paramref name="serializationKind" /> for <see cref="SerializationKind" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public SerializerDescription DeepCloneWithSerializationKind(SerializationKind serializationKind)
        {
            var result = new SerializerDescription(
                                 serializationKind,
                                 this.SerializationFormat,
                                 this.ConfigurationTypeRepresentation?.DeepClone(),
                                 this.CompressionKind,
                                 this.Metadata?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="SerializationFormat" />.
        /// </summary>
        /// <param name="serializationFormat">The new <see cref="SerializationFormat" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="SerializerDescription" /> using the specified <paramref name="serializationFormat" /> for <see cref="SerializationFormat" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public SerializerDescription DeepCloneWithSerializationFormat(SerializationFormat serializationFormat)
        {
            var result = new SerializerDescription(
                                 this.SerializationKind,
                                 serializationFormat,
                                 this.ConfigurationTypeRepresentation?.DeepClone(),
                                 this.CompressionKind,
                                 this.Metadata?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="CompressionKind" />.
        /// </summary>
        /// <param name="compressionKind">The new <see cref="CompressionKind" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="SerializerDescription" /> using the specified <paramref name="compressionKind" /> for <see cref="CompressionKind" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public SerializerDescription DeepCloneWithCompressionKind(CompressionKind compressionKind)
        {
            var result = new SerializerDescription(
                                 this.SerializationKind,
                                 this.SerializationFormat,
                                 this.ConfigurationTypeRepresentation?.DeepClone(),
                                 compressionKind,
                                 this.Metadata?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="ConfigurationTypeRepresentation" />.
        /// </summary>
        /// <param name="configurationTypeRepresentation">The new <see cref="ConfigurationTypeRepresentation" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="SerializerDescription" /> using the specified <paramref name="configurationTypeRepresentation" /> for <see cref="ConfigurationTypeRepresentation" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public SerializerDescription DeepCloneWithConfigurationTypeRepresentation(TypeRepresentation configurationTypeRepresentation)
        {
            var result = new SerializerDescription(
                                 this.SerializationKind,
                                 this.SerializationFormat,
                                 configurationTypeRepresentation,
                                 this.CompressionKind,
                                 this.Metadata?.ToDictionary(k => k.Key?.Clone().ToString(), v => v.Value?.Clone().ToString()));

            return result;
        }

        /// <summary>
        /// Deep clones this object with a new <see cref="Metadata" />.
        /// </summary>
        /// <param name="metadata">The new <see cref="Metadata" />.  This object will NOT be deep cloned; it is used as-is.</param>
        /// <returns>New <see cref="SerializerDescription" /> using the specified <paramref name="metadata" /> for <see cref="Metadata" /> and a deep clone of every other property.</returns>
        [SuppressMessage("Microsoft.Design", "CA1002: DoNotExposeGenericLists")]
        [SuppressMessage("Microsoft.Naming", "CA1702:CompoundWordsShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly")]
        [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix")]
        [SuppressMessage("Microsoft.Naming", "CA1715:IdentifiersShouldHaveCorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1716:IdentifiersShouldNotMatchKeywords")]
        [SuppressMessage("Microsoft.Naming", "CA1719:ParameterNamesShouldNotMatchMemberNames")]
        [SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames")]
        [SuppressMessage("Microsoft.Naming", "CA1722:IdentifiersShouldNotHaveIncorrectPrefix")]
        [SuppressMessage("Microsoft.Naming", "CA1725:ParameterNamesShouldMatchBaseDeclaration")]
        [SuppressMessage("Microsoft.Naming", "CA1726:UsePreferredTerms")]
        [SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly")]
        public SerializerDescription DeepCloneWithMetadata(IReadOnlyDictionary<string, string> metadata)
        {
            var result = new SerializerDescription(
                                 this.SerializationKind,
                                 this.SerializationFormat,
                                 this.ConfigurationTypeRepresentation?.DeepClone(),
                                 this.CompressionKind,
                                 metadata);

            return result;
        }

        /// <inheritdoc />
        public override string ToString()
        {
            var result = Invariant($"OBeautifulCode.Serialization.SerializerDescription: SerializationKind = {this.SerializationKind.ToString() ?? "<null>"}, SerializationFormat = {this.SerializationFormat.ToString() ?? "<null>"}, CompressionKind = {this.CompressionKind.ToString() ?? "<null>"}, ConfigurationTypeRepresentation = {this.ConfigurationTypeRepresentation?.ToString() ?? "<null>"}, Metadata = {this.Metadata?.ToString() ?? "<null>"}.");

            return result;
        }
    }
}